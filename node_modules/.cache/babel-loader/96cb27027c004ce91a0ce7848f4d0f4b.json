{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gaeby\\\\Desktop\\\\Robotik\\\\Tutorials\\\\React\\\\testfield-vote-example\\\\express-ssr\\\\vote-ssr-react\\\\src\\\\components\\\\SingleVoteController.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport VotingComponent from './VotingComponent';\nimport { fetchJson, sendJson } from '../backend/Backend';\nexport default class SingleVoteController extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      vote: null\n    };\n    this.registerVote = this.registerVote.bind(this);\n    this.routeToMain = this.routeToMain.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.loadVote(nextProps);\n  }\n\n  componentDidMount() {\n    this.loadVote(this.props);\n    document.title = \"Vote \".concat(this.props.match.params.id, \" - Vote as a Service\");\n  }\n\n  loadVote(props) {\n    const requestedVoteId = props.match.params.id;\n    console.log(requestedVoteId);\n\n    if (!requestedVoteId || this.state.vote && this.state.vote.id === requestedVoteId) {\n      return;\n    }\n\n    fetchJson(\"/api/votes/\".concat(requestedVoteId)).then(vote => {\n      document.title = \"\".concat(vote.title, \" - Vote as a Service\");\n      this.setState({\n        vote\n      });\n    });\n  }\n\n  registerVote(vote, choice) {\n    sendJson('put', \"/api/votes/\".concat(vote.id, \"/choices/\").concat(choice.id, \"/vote\"), {}).then(() => this.routeToMain());\n  }\n\n  routeToMain() {\n    //this.context.history.pushState(null, '/');\n    this.props.history.push('/');\n  }\n\n  render() {\n    const vote = this.state.vote;\n\n    if (vote) {\n      return React.createElement(VotingComponent, {\n        vote: vote,\n        onDismissVote: this.routeToMain,\n        onRegisterChoice: choice => {\n          this.registerVote(vote, choice);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    } else {\n      return null;\n    }\n  }\n\n}\n/*\r\nSingleVoteController.contextTypes = {\r\n        history: PropTypes.object.isRequired\r\n};\r\n*/","map":{"version":3,"sources":["C:\\Users\\gaeby\\Desktop\\Robotik\\Tutorials\\React\\testfield-vote-example\\express-ssr\\vote-ssr-react\\src\\components\\SingleVoteController.js"],"names":["React","PropTypes","VotingComponent","fetchJson","sendJson","SingleVoteController","Component","constructor","state","vote","registerVote","bind","routeToMain","componentWillReceiveProps","nextProps","nextContext","loadVote","componentDidMount","props","document","title","match","params","id","requestedVoteId","console","log","then","setState","choice","history","push","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,oBAAlC;AAEA,eAAe,MAAMC,oBAAN,SAAmCL,KAAK,CAACM,SAAzC,CAAmD;AAC9DC,EAAAA,WAAW,GAAG;AACV;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDE,EAAAA,yBAAyB,CAACC,SAAD,EAAYC,WAAZ,EAAyB;AAC9C,SAAKC,QAAL,CAAcF,SAAd;AACH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKD,QAAL,CAAc,KAAKE,KAAnB;AACAC,IAAAA,QAAQ,CAACC,KAAT,kBAAyB,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBC,EAAjD;AACH;;AAEDP,EAAAA,QAAQ,CAACE,KAAD,EAAQ;AACZ,UAAMM,eAAe,GAAGN,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBC,EAA3C;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;;AACA,QAAI,CAACA,eAAD,IAAqB,KAAKhB,KAAL,CAAWC,IAAX,IAAmB,KAAKD,KAAL,CAAWC,IAAX,CAAgBc,EAAhB,KAAuBC,eAAnE,EAAqF;AACjF;AACH;;AAEDrB,IAAAA,SAAS,sBAAeqB,eAAf,EAAT,CACKG,IADL,CACUlB,IAAI,IAAI;AACVU,MAAAA,QAAQ,CAACC,KAAT,aAAoBX,IAAI,CAACW,KAAzB;AACA,WAAKQ,QAAL,CAAc;AACVnB,QAAAA;AADU,OAAd;AAGH,KANL;AAOH;;AAEDC,EAAAA,YAAY,CAACD,IAAD,EAAOoB,MAAP,EAAe;AACvBzB,IAAAA,QAAQ,CAAC,KAAD,uBAAsBK,IAAI,CAACc,EAA3B,sBAAyCM,MAAM,CAACN,EAAhD,YAA2D,EAA3D,CAAR,CACKI,IADL,CACU,MAAM,KAAKf,WAAL,EADhB;AAEH;;AAEDA,EAAAA,WAAW,GAAG;AACV;AACA,SAAKM,KAAL,CAAWY,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UACGvB,IADH,GACY,KAAKD,KADjB,CACGC,IADH;;AAEL,QAAIA,IAAJ,EAAU;AACN,aAAO,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEA,IAAvB;AACiB,QAAA,aAAa,EAAE,KAAKG,WADrC;AAEiB,QAAA,gBAAgB,EAAGiB,MAAD,IAAY;AAAC,eAAKnB,YAAL,CAAkBD,IAAlB,EAAwBoB,MAAxB;AAAgC,SAFhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAIH,KALD,MAKO;AACC,aAAO,IAAP;AACP;AACJ;;AAzD6D;AA4DlE","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport VotingComponent from './VotingComponent';\r\nimport {fetchJson, sendJson} from '../backend/Backend';\r\n\r\nexport default class SingleVoteController extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            vote: null\r\n        };\r\n\r\n        this.registerVote = this.registerVote.bind(this);\r\n        this.routeToMain = this.routeToMain.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        this.loadVote(nextProps);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadVote(this.props);\r\n        document.title = `Vote ${this.props.match.params.id} - Vote as a Service`;\r\n    }\r\n\r\n    loadVote(props) {\r\n        const requestedVoteId = props.match.params.id;\r\n        console.log(requestedVoteId);\r\n        if (!requestedVoteId || (this.state.vote && this.state.vote.id === requestedVoteId)) {\r\n            return;\r\n        }\r\n\r\n        fetchJson(`/api/votes/${requestedVoteId}`)\r\n            .then(vote => {\r\n                document.title = `${vote.title} - Vote as a Service`;\r\n                this.setState({\r\n                    vote\r\n                });\r\n            });\r\n    }\r\n\r\n    registerVote(vote, choice) {\r\n        sendJson('put', `/api/votes/${vote.id}/choices/${choice.id}/vote`, {})\r\n            .then(() => this.routeToMain());\r\n    }\r\n\r\n    routeToMain() {\r\n        //this.context.history.pushState(null, '/');\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const { vote } = this.state;\r\n        if (vote) {\r\n            return <VotingComponent vote={vote}\r\n                                    onDismissVote={this.routeToMain}\r\n                                    onRegisterChoice={(choice) => {this.registerVote(vote, choice)}}\r\n            />\r\n        } else {\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nSingleVoteController.contextTypes = {\r\n        history: PropTypes.object.isRequired\r\n};\r\n*/"]},"metadata":{},"sourceType":"module"}