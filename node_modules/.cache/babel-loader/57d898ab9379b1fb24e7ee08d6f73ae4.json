{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\gaeby\\\\Desktop\\\\Robotik\\\\Tutorials\\\\React\\\\testfield-vote-example\\\\express-ssr\\\\vote-ssr-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\gaeby\\\\Desktop\\\\Robotik\\\\Tutorials\\\\React\\\\testfield-vote-example\\\\express-ssr\\\\vote-ssr-react\\\\src\\\\components\\\\VoteComposer.js\";\nimport React from 'react';\n\nfunction emptyChoice() {\n  return {\n    id: \"choice_\".concat(Date.now()),\n    count: 0,\n    title: null\n  };\n}\n\nfunction emptyVote() {\n  return {\n    title: '',\n    description: '',\n    formCompleted: false,\n    choices: [emptyChoice()]\n  };\n}\n\nexport default class VoteComposer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vote: emptyVote()\n    };\n    this.activateIfNeeded = this.activateIfNeeded.bind(this);\n    this.save = this.save.bind(this);\n    this.close = this.close.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  close() {\n    const onDeactivate = this.props.onDeactivate;\n    this.setState(emptyVote());\n    onDeactivate();\n  }\n\n  save() {\n    const onSave = this.props.onSave;\n    const vote = this.state.vote;\n\n    const newVote = _objectSpread({}, vote, {\n      choices: vote.choices.slice(0, -1)\n    });\n\n    onSave(newVote);\n    this.close();\n  }\n\n  activateIfNeeded() {\n    const _this$props = this.props,\n          onActivate = _this$props.onActivate,\n          active = _this$props.active;\n\n    if (!active) {\n      onActivate();\n    }\n  }\n\n  onChange(event) {\n    const _event$target = event.target,\n          fieldName = _event$target.name,\n          fieldValue = _event$target.value;\n    const vote = this.state.vote;\n\n    const newVote = _objectSpread({}, vote, {\n      [fieldName]: fieldValue\n    });\n\n    this.setState({\n      vote: newVote\n    });\n  }\n\n  onChoiceChange(choiceIx, title) {\n    const vote = this.state.vote;\n    const choices = vote.choices;\n    const choice = choices[choiceIx];\n\n    const newChoice = _objectSpread({}, choice, {\n      title\n    });\n\n    const newChoices = choices.map(c => c.id === choice.id ? newChoice : c);\n\n    if (!choice.title && newChoice.title && choiceIx === choices.length - 1) {\n      newChoices.push(emptyChoice());\n    }\n\n    this.setState({\n      vote: _objectSpread({}, vote, {\n        choices: newChoices\n      })\n    });\n  }\n\n  isFormCompleted() {\n    const active = this.props.active;\n    const _this$state$vote = this.state.vote,\n          title = _this$state$vote.title,\n          description = _this$state$vote.description,\n          choices = _this$state$vote.choices;\n    const choicesCount = choices.length; // Vote completed\n\n    let formCompleted = active && title && description && choicesCount > 1; // Choices completed\n\n    if (formCompleted) {\n      formCompleted = choices.every((c, ix) => ix === choicesCount - 1 || c.title);\n    }\n\n    return formCompleted;\n  }\n\n  renderInactiveForm() {\n    return React.createElement(\"div\", {\n      className: \"Row VotesRow Spacer\",\n      onClick: this.activateIfNeeded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"Emphasis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"What do \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"you\"), \" want to know?\"), React.createElement(\"div\", {\n      className: \"Badge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Add Voting\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Click here to leave your own question.\"));\n  }\n\n  renderActiveForm() {\n    const _this$state$vote2 = this.state.vote,\n          title = _this$state$vote2.title,\n          description = _this$state$vote2.description,\n          choices = _this$state$vote2.choices;\n    const formCompleted = this.isFormCompleted();\n    return React.createElement(\"div\", {\n      className: \"Row VoteComposer Spacer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"Title\",\n      autoFocus: true,\n      name: \"title\",\n      type: \"text\",\n      placeholder: \"What do you want to know?\",\n      value: title,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      className: \"Description\",\n      name: \"description\",\n      type: \"text\",\n      placeholder: \"Describe your question in one sentence here\",\n      value: description,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, choices.map((c, ix) => {\n      const keyAndName = \"choices_\".concat(ix);\n      return React.createElement(\"input\", {\n        className: \"Choice\",\n        type: \"text\",\n        name: keyAndName,\n        key: keyAndName,\n        placeholder: \"Choice #\".concat(ix + 1),\n        onChange: event => {\n          this.onChoiceChange(ix, event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      });\n    }), React.createElement(\"div\", {\n      className: \"ButtonBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: formCompleted ? 'Button' : 'Button disabled',\n      onClick: formCompleted ? this.save : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Save\"), React.createElement(\"button\", {\n      className: \"Button\",\n      onClick: this.close,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n  render() {\n    const active = this.props.active;\n\n    if (!active) {\n      return this.renderInactiveForm();\n    }\n\n    return this.renderActiveForm();\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\gaeby\\Desktop\\Robotik\\Tutorials\\React\\testfield-vote-example\\express-ssr\\vote-ssr-react\\src\\components\\VoteComposer.js"],"names":["React","emptyChoice","id","Date","now","count","title","emptyVote","description","formCompleted","choices","VoteComposer","Component","constructor","props","state","vote","activateIfNeeded","bind","save","close","onChange","onDeactivate","setState","onSave","newVote","slice","onActivate","active","event","target","fieldName","name","fieldValue","value","onChoiceChange","choiceIx","choice","newChoice","newChoices","map","c","length","push","isFormCompleted","choicesCount","every","ix","renderInactiveForm","renderActiveForm","keyAndName","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nfunction emptyChoice() {\r\n    return {\r\n        id: `choice_${Date.now()}`,\r\n        count: 0,\r\n        title: null\r\n    };\r\n}\r\n\r\nfunction emptyVote() {\r\n    return {\r\n        title:          '',\r\n        description:    '',\r\n        formCompleted:  false,\r\n        choices:        [emptyChoice()]\r\n    };\r\n}\r\n\r\nexport default class VoteComposer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            vote: emptyVote()\r\n        };\r\n\r\n        this.activateIfNeeded = this.activateIfNeeded.bind(this);\r\n        this.save = this.save.bind(this);\r\n        this.close = this.close.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    close() {\r\n        const {onDeactivate} = this.props;\r\n        this.setState(emptyVote());\r\n        onDeactivate();\r\n    }\r\n\r\n    save() {\r\n        const {onSave} = this.props;\r\n        const {vote} = this.state;\r\n        const newVote = {\r\n            ...vote,\r\n            choices: vote.choices.slice(0, -1)\r\n        };\r\n        onSave(newVote);\r\n        this.close();\r\n    }\r\n\r\n    activateIfNeeded() {\r\n        const {onActivate, active} = this.props;\r\n        if (!active) {\r\n            onActivate();\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        const { name: fieldName, value: fieldValue } = event.target;\r\n        const { vote } = this.state;\r\n\r\n        const newVote = {\r\n            ...vote,\r\n            [fieldName]: fieldValue\r\n        };\r\n\r\n        this.setState({\r\n            vote: newVote\r\n        });\r\n    }\r\n\r\n    onChoiceChange(choiceIx, title) {\r\n        const { vote } = this.state;\r\n        const choices = vote.choices;\r\n        const choice = choices[choiceIx];\r\n\r\n        const newChoice = {\r\n            ...choice,\r\n            title\r\n        };\r\n\r\n        const newChoices = choices.map((c) => (c.id === choice.id ? newChoice : c));\r\n\r\n        if (!choice.title && newChoice.title && choiceIx === (choices.length - 1)) {\r\n            newChoices.push(emptyChoice());\r\n        }\r\n\r\n        this.setState({\r\n            vote: {\r\n                ...vote,\r\n                choices: newChoices\r\n            }\r\n        });\r\n    }\r\n\r\n    isFormCompleted() {\r\n        const {active} = this.props;\r\n        const { vote: { title, description, choices } } = this.state;\r\n        const choicesCount = choices.length;\r\n        // Vote completed\r\n        let formCompleted = active && title && description && choicesCount > 1;\r\n\r\n        // Choices completed\r\n        if (formCompleted) {\r\n            formCompleted = choices.every((c, ix) => ix === choicesCount - 1 || c.title);\r\n        }\r\n\r\n        return formCompleted;\r\n    }\r\n\r\n    renderInactiveForm() {\r\n        return (\r\n          <div className=\"Row VotesRow Spacer\" onClick={this.activateIfNeeded}>\r\n              <h1 className=\"Title\">\r\n                  <span className=\"Emphasis\">What do <b>you</b> want to know?</span>\r\n                  <div className=\"Badge\">\r\n                      Add Voting\r\n                  </div>\r\n              </h1>\r\n              <p>\r\n                  Click here to leave your own question.\r\n              </p>\r\n          </div>\r\n        );\r\n    }\r\n\r\n    renderActiveForm() {\r\n        const { vote: { title, description, choices } } = this.state;\r\n        const formCompleted = this.isFormCompleted();\r\n\r\n        return (\r\n          <div className=\"Row VoteComposer Spacer\">\r\n              <div className=\"Head\">\r\n                  <h1 className=\"Title\">\r\n                      <input className=\"Title\"\r\n                             autoFocus\r\n                             name=\"title\"\r\n                             type=\"text\"\r\n                             placeholder=\"What do you want to know?\"\r\n                             value={title}\r\n                             onChange={this.onChange} />\r\n                  </h1>\r\n                  <input className=\"Description\"\r\n                         name=\"description\"\r\n                         type=\"text\"\r\n                         placeholder=\"Describe your question in one sentence here\"\r\n                         value={description}\r\n                         onChange={this.onChange} />\r\n              </div>\r\n\r\n              <div className=\"Body\">\r\n                  {choices.map((c, ix) => {\r\n                      const keyAndName = `choices_${ix}`;\r\n                      return (\r\n                          <input className=\"Choice\"\r\n                                 type=\"text\"\r\n                                 name={keyAndName}\r\n                                 key={keyAndName}\r\n                                 placeholder={`Choice #${(ix + 1)}`}\r\n                                 onChange={(event) => {this.onChoiceChange(ix, event.target.value)}} />\r\n                      );\r\n                  })}\r\n\r\n                  <div className=\"ButtonBar\">\r\n                      <button className={formCompleted ? 'Button' : 'Button disabled'}\r\n                         onClick={formCompleted ? this.save : null}>Save</button>\r\n                      <button className=\"Button\" onClick={this.close}>Cancel</button>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {active} = this.props;\r\n\r\n        if (!active) {\r\n            return this.renderInactiveForm();\r\n        }\r\n\r\n        return this.renderActiveForm();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}